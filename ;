import Modal from "@/components/ui/Modal";
import { toggleModalDefinicion } from "@/redux/slices/modalSlice";
import { useDispatch, useSelector } from "react-redux";
import { RootState } from "@/redux/store";
import { definitionData } from "@/utils/constants";
import DicLi from "./DictionaryList";
import useSWR from "swr";
import { Dictionary } from "@/types/ModelTypes";

export default function ModalDefinicion() {


    const word= "perro"

    const language = "es"

    const { data: dictionary } = useSWR<Dictionary[]>(`http://140.84.175.1:5000/meaning?=${word}&lang=${language}`);

    const dispatch = useDispatch();

    const { modalDefinicion } = useSelector((state: RootState) => state.modal);

    return (
        <Modal 
            active={modalDefinicion} 
            setActive={() => dispatch(toggleModalDefinicion())} 
            className="w-1/3 px-8 py-4"
        >
              <div className="grid grid-cols-2 mb-4">
                <h1 className="text-start font-mono text-2xl leading-loose">
                    Dictionary
                </h1>
                <button
                    onClick={() => dispatch(toggleModalDefinicion())}
                    className="w-fit text-red-500 font-mono text-1xl justify-self-end"
                >
                    Cerrar
                </button>
            </div>
            <hr className="mb-4" />

            { (dictionary && dictionary.length > 0) && (
            <div className="flex flex-col justify-start w-full text-start items-start space-y-2">
                {dictionary[0]?.definition.slice(0, 5).map((meaning:string, index:any) => (
                    <p key={index} className="text-mono text-sm font-medium bg-gray-100 p-2 rounded-lg shadow">
                        {index + 1}. {meaning}
                    </p>
                ))}
            </div>
            )
            }
            <p className="text-mono text-xs text-end font-bold mt-4">
                {`"Lobster Dictionary ${language} edition"`}
            </p> 
        </Modal>
    );
}
